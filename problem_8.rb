# The four adjacent digits in the 1000-digit number that
# have the greatest product are 9 x 9 x 8 x 9 = 5832.
#
# Find the thirteen adjacent digits in the 1000-digit
# number that have the greatest product. What is the value
# of this product?

string1 = '731671765313306249192251196744265747423553491949349698352031277450632
           623957831801698480186947885184385861560789112949495459501737958331952
           853208805511125406987471585238630507156932909632952274430435576689664
           895044524452316173185640309871112172238311362229893423380308135336276
           614282806444486645238749303589072962904915604407723907138105158593079
           608667017242712188399879790879227492190169972088809377665727333001053
           367881220235421809751254540594752243'
string2 = '525849077116705560136048395864467063244157221553975369781797784617406
           495514929086256932197846862248283972241375657056057490261407972968652
           414535100474821663704844031998900088952434506585412275886668811642717
           147992444292823086346567481391912316282458617866458359124566529476545
           682848912883142607690042242190226710556263211111093705442175069416589
           604080719840385096245544436298123098787992724428490918884580156166097
           919133875499200524063689912560717606'
string3 = '058861164671094050775410022569831552000559357297257163626956188267042
           8252483600823257530420752963450'

cleaned_string1 = string1.gsub(/[^0-9a-z ]/i, '')
cleaned_string2 = string2.gsub(/[^0-9a-z ]/i, '')
cleaned_string3 = string3.gsub(/[^0-9a-z ]/i, '')

number = cleaned_string1 + cleaned_string2 + cleaned_string3
digits = number.chars.map!(&:to_i)

products = []

digits.each_with_index do |_, index|
  products << digits.slice(index, 13).inject(:*)
end

puts products.max
